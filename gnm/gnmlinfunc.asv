function vecYhat = gnmlinfunc(vecLinCoeffs,matX,cellLinkFunctions,vecLinCoeffFunctions)
	%gnmlinfunc Wrapper for lsqcurvefit()
	%   vecYhat = gnmlinfunc(vecLinCoeffs,matX);
	%
	%vecYhat is summed contribution of all predictors into [n x 1] vector,
	%where n is the number of observations
	
	%% get globals
	if nargin < 3 || isempty(cellLinkFunctions)
		global gCellLinkFunctions;
		cellLinkFunctions = gCellLinkFunctions;
	end
	if nargin < 4 || isempty(vecLinCoeffFunctions)
		global gVecLinCoeffFunctions;
		vecLinCoeffFunctions = gVecLinCoeffFunctions;
	end
	
	%% run
	vecYhat = zeros(size(matX,1),1);
	for intPred=1:size(matX,2)
		%get arguments
		vecArgs = find(vecLinCoeffFunctions==intPred);
		%check if constant
		if strcmpi(cellLinkFunctions{intPred},'constant')
			vecYhat = vecYhat + vecLinCoeffs(vecArgs);
		elseif strfind(cellLinkFunctions{intPred},'_mult')
			intCutOff = strfind(cellLinkFunctions{intPred},'_mult');
			strFunc = cellLinkFunctions{intPred}(1:(intCutOff-1));
			%build code string
			strArgs = strcat('vecLinCoeffs([',num2str(vecArgs),'])');
			strEval = strcat(strFunc,'(matX(:,',num2str(intPred),'),',strArgs,')');
			vecYhat = vecYhat .* (1 + eval(strEval));
		else
			%build code string
			strArgs = strcat('vecLinCoeffs([',num2str(vecArgs),'])');
			strEval = strcat(cellLinkFunctions{intPred},'(matX(:,',num2str(intPred),'),',strArgs,')');
			vecYhat = vecYhat + eval(strEval);
		end
	end
end

